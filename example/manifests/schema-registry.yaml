apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: schema-registry
  name: schema-registry
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: schema-registry
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: schema-registry
    spec:
      containers:
        - env:
            - name: REGISTRY_RULES_GLOBAL_COMPATIBILITY
              value: BACKWARD
            - name: REGISTRY_CCOMPAT_GLOBAL_COMPATIBILITY_LEVEL
              value: BACKWARD
            - name: COMPATIBILITY_LEVEL
              value: BACKWARD
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "my-cluster-kafka-bootstrap:9094"
            - name: REGISTRY_KAFKASQL_SCRAM_USER
              value: schema-registry
            - name: REGISTRY_KAFKASQL_SCRAM_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: schema-registry
            - name: REGISTRY_KAFKA_COMMON_SASL_JAAS_CONFIG
              value: >-
                org.apache.kafka.common.security.scram.ScramLoginModule required
                username='$(REGISTRY_KAFKASQL_SCRAM_USER)'
                password='$(REGISTRY_KAFKASQL_SCRAM_PASSWORD)';
            - name: QUARKUS_PROFILE
              value: prod
            - name: REGISTRY_PROPERTIES_PREFIX
              value: REGISTRY_
            - name: REGISTRY_UI_FEATURES_READONLY
              value: 'true'
            - name: REGISTRY_KAFKA_COMMON_SASL_MECHANISM
              value: SCRAM-SHA-512
            - name: REGISTRY_KAFKA_COMMON_SECURITY_PROTOCOL
              value: SASL_PLAINTEXT
          image: apicurio/apicurio-registry-kafkasql:2.6.8.Final
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: registry
          ports:
            - containerPort: 8443
              protocol: TCP
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  annotations:
    spoud.io/kcc-context.application: schema-registry
  labels:
    strimzi.io/cluster: my-cluster
  name: schema-registry
spec:
  authentication:
    type: scram-sha-512
  authorization:
    acls:
    - host: '*'
      operations:
      - All
      resource:
        name: "kafkasql-journal"
        patternType: literal
        type: topic
    - host: '*'
      operations:
      - Read
      resource:
        name: "*"
        patternType: literal
        type: group
    type: simple
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: schema-registry
  name: schema-registry
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: schema-registry
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  annotations:
    spoud.io/kcc-context.application: schema-registry
  labels:
    strimzi.io/cluster: my-cluster
  name: kafkasql-journal
spec:
  config:
    min.insync.replicas: 1
    cleanup.policy: compact
    message.timestamp.type: LogAppendTime
  partitions: 1
