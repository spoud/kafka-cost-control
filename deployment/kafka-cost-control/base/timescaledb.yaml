apiVersion: v1
data:
  init-db.sql: |+
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;

    CREATE TABLE "kafka_aggregated-table-friendly"
    (
        "startTime"         TIMESTAMP        NOT NULL,
        "endTime"           TIMESTAMP        NOT NULL,
        "entityType"        VARCHAR          NOT NULL,
        "initialMetricName" VARCHAR          NOT NULL,
        "name"              VARCHAR          NOT NULL,
        "value"             DOUBLE PRECISION NOT NULL,
        "cost"              DOUBLE PRECISION NULL,
        "tags"              JSONB            NOT NULL,
        "context"           JSONB            NOT NULL,
        PRIMARY KEY ("startTime", "endTime", "entityType", "initialMetricName", "name")
    );

    SELECT create_hypertable('kafka_aggregated-table-friendly', by_range('startTime', INTERVAL '7 days'));
  
    -- Reorder chunk for fast query when we filter by metric
    CREATE INDEX "kafka_aggregated-table-friendly_name_idx" ON "kafka_aggregated-table-friendly" USING btree (name);
    SELECT add_reorder_policy('kafka_aggregated-table-friendly', 'kafka_aggregated-table-friendly_name_idx');

kind: ConfigMap
metadata:
  creationTimestamp: null
  name: timescaledb-init
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
spec:
  selector:
    matchLabels:
      k8s-app: timescaledb
  serviceName: "timescaledb"
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: timescaledb
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: tsdb-init
          configMap:
            name: timescaledb-init
      initContainers:
        - name: pgsql-data-permission-fix
          image: busybox
          command: [ "/bin/chmod","-R","777", "/data" ]
          volumeMounts:
            - name: timescaledb-data
              mountPath: /data
        - name: pgsql-lost-and-found-fix
          image: busybox
          command: [ "/bin/rm", "-Rf", "/data/lost+found", "||", "echo", "done" ]
          volumeMounts:
            - name: timescaledb-data
              mountPath: /data
      containers:
        - name: timescaledb
          image: timescale/timescaledb:latest-pg16
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 4000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 0.5Gi
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-cost-control-secret
                  key: POSTGRES_PASSWORD
          ports:
            - containerPort: 5432
              name: timescaledb
          volumeMounts:
            - name: tsdb-init
              mountPath: /docker-entrypoint-initdb.d
            - name: timescaledb-data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: timescaledb-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi

---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: timescaledb
  name: timescaledb-service
spec:
  ports:
    - port: 5432
      name: timescaledb
      targetPort: 5432
  selector:
    k8s-app: timescaledb
