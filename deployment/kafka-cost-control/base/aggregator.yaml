apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-cost-control
spec:
  selector:
    matchLabels:
      k8s-app: kafka-cost-control
  serviceName: "kafka-cost-control"
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: kafka-cost-control
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 185 # jboss
      containers:
        - name: kafka-cost-control
          image: spoud/kafka-cost-control:latest
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 4000m
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 1Gi
          env:
            - name: QUARKUS_KAFKA_STREAMS_STATE_DIR
              value: /home/jboss/kafka-stream/data/
            - name: QUARKUS_PROFILE
              value: "ccloud"
            - name: CC_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-cost-control-secret
                  key: CC_ADMIN_PASSWORD
          envFrom:
            - secretRef:
                name: kafka-cost-control-secret
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: kstream-data
              mountPath: /home/jboss/kafka-stream/
          startupProbe:
            httpGet:
              path: /q/health/started
              port: 8080
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP

  volumeClaimTemplates:
    - metadata:
        name: kstream-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kafka-cost-control
  name: kafka-cost-control-service
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    k8s-app: kafka-cost-control

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-cost-control-ingress
spec:
  rules:
    - host: "TO_BE_DEFINED_BY_OVERRIDE"
      http:
        paths:
          - path: /graphql
            pathType: Prefix
            backend:
              service:
                name: kafka-cost-control
                port:
                  number: 8080
