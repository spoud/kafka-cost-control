{{ $pricingRulesTopic := (include "pricingRulesTopic" .) }}
{{ $aggregatedTopic := (include "aggregatedTopic" .) }}
{{ $aggregatedTableFriendlyTopic := (include "aggregatedTableFriendlyTopic" .) }}
{{ $contextTopic := (include "contextTopic" .) }}
{{ $rawMetricsTopics := (include "rawMetricsTopics" .) }}

{{- define "strimziCaCert" -}}
{{- default "" .Values.strimzi.clusterCaCertSecret }}
{{- end -}}
{{ $caCert := (include "strimziCaCert" .) }}

{{ if .Values.aggregator.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-kafka-cost-control
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}-kafka-cost-control
      {{- with .Values.aggregator.labels }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  #serviceName: "kafka-cost-control"
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name}}-kafka-cost-control
        {{- with .Values.aggregator.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 185 # jboss
      volumes:
      {{- if $caCert }}
      - name: kafka-cluster-ca
        secret:
          secretName: {{ $caCert }}
      {{- end }}
      - name: aggregator-config
        configMap:
          name: {{ .Release.Name }}-kafka-cost-control-config
      - name: tmp
        emptyDir: {}
      containers:
        - name: kafka-cost-control
          image: {{ .Values.aggregator.image }}
          securityContext:
            {{- .Values.aggregator.securityContext | toYaml | nindent 12 }}
          imagePullPolicy: Always
          resources:
            limits:
              cpu: {{ .Values.aggregator.resources.limits.cpu }}
              memory: {{ .Values.aggregator.resources.limits.memory }}
            requests:
              cpu: {{ .Values.aggregator.resources.requests.cpu }}
              memory: {{ .Values.aggregator.resources.requests.memory }}
          env:
            {{- if .Values.aggregator.olapEnabled }}
            - name: CC_OLAP_ENABLED
              value: "true"
            - name: CC_OLAP_DATABASE_URL
              value: "jdbc:duckdb:/home/jboss/kafka-stream/duckdb.db"
            {{- end }}
            - name: QUARKUS_KAFKA_STREAMS_STATE_DIR
              value: /home/jboss/kafka-stream/data/
            - name: KAFKA_APPLICATION_ID
              value: {{ .Values.aggregator.appId }}
            - name: KAFKA_SCHEMA_REGISTRY_URL
              value: {{ .Values.schemaRegistry.url }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ .Values.strimzi.bootstrapServer }}
            - name: CC_TOPICS_PRICING_RULES
              value: {{ $pricingRulesTopic }}
            - name: CC_TOPICS_AGGREGATED
              value: {{ $aggregatedTopic }}
            - name: CC_TOPICS_AGGREGATED_TABLE_FRIENDLY
              value: {{ $aggregatedTableFriendlyTopic }}
            - name: CC_TOPICS_CONTEXT_DATA
              value: {{ $contextTopic }}
            - name: CC_TOPICS_RAW_DATA
              value: {{ $rawMetricsTopics }}
            {{ if eq .Values.strimzi.auth "scram-sha-512" }}
            - name: KAFKA_SASL_MECHANISM
              value: SCRAM-SHA-512
            - name: KAFKA_SASL_JAAS_CONFIG
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-aggregator
                  key: sasl.jaas.config
            {{ if .Values.strimzi.scramOverTls }}
            - name: KAFKA_SECURITY_PROTOCOL
              value: SASL_SSL
              {{- if $caCert }}
            - name: KAFKA_SSL_TRUSTSTORE_LOCATION
              value: /etc/kafka/ca.p12
            - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $caCert }}
                  key: ca.password
              {{- end }} {{/* if $caCert */}}
            {{ else }}
            - name: KAFKA_SECURITY_PROTOCOL
              value: SASL_PLAINTEXT
            {{ end }} {{/* if .Values.strimzi.scramOverTls */}}
            {{ end }} {{/* if eq .Values.strimzi.auth "scram-sha-512" */}}
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOny: false
            - name: kstream-data
              mountPath: /home/jboss/kafka-stream/
            {{- if $caCert }}
            - name: kafka-cluster-ca
              mountPath: /etc/kafka
              readOnly: true
            {{- end }}
            - name: aggregator-config
              mountPath: /deployments/config
          startupProbe:
            httpGet:
              path: /q/health/started
              port: 8080
              scheme: HTTP
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10

  volumeClaimTemplates:
    - metadata:
        name: kstream-data
      spec:
        {{ if .Values.aggregator.volumeClaimTemplate.storageClassName }}
        storageClassName: {{ .Values.aggregator.volumeClaimTemplate.storageClassName }}
        {{ end }}
        {{ if .Values.aggregator.volumeClaimTemplate.accessModes }}
        accessModes:
          {{- .Values.aggregator.volumeClaimTemplate.accessModes | toYaml | nindent 10 }}
        {{ else }}
        accessModes: [ "ReadWriteOnce" ]
        {{ end }}
        resources:
          requests:
            storage: {{ .Values.aggregator.volumeClaimTemplate.resources.requests.storage }}
---
apiVersion: v1
data:
  application.yaml: |
    cc:
      metrics:
        transformations:
          splitMetricAmongPrincipals:
            kafka_server_brokertopicmetrics_bytesout_total: readers
            kafka_server_brokertopicmetrics_bytesin_total: writers
            kafka_log_log_size: writers
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-kafka-cost-control-config
{{- end -}}